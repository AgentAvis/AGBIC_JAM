<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tweakables
with (oPlayer) { Speed = 2 JumpSpeed = 2.75 }
global.Grav = .13
HP = 2
jumps = 20
image_speed = 0.15

//init
vsp = 0                //custon vspeed
hsp = 0                //custom hspeed
App = false            //used for slo-mo basically
app = 0                //timerr used to count if its time for me to do things
lastside = 0           //last side i slid on, should be disabled
num = 0                //used for animating the SECOND drawn sprite

//audio
playLandSound = false; //forget what this is for
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ScTime()
//cheats

if keyboard_check_pressed(ord('T')) and global.debug { x = mouse_x y = mouse_y }

//inputs
up = keyboard_check_pressed(ord('W')) + keyboard_check_pressed(vk_space)
left = keyboard_check(ord('A'))
right = keyboard_check(ord('D'))
down = keyboard_check(ord('S'))

//autojump when you land on something
    //disabled
    /*
Stomp = collision_rectangle(x-5,y+1,x+3,y+5,oStompable,true,true)
if instance_exists(Stomp) and vsp &gt; 0
{
    with (Stomp) { HP -= 1 }
    vsp = -JumpSpeed 
}
    */
    
//if App { //this makes sure everything works the same even if time is slowed

//Gravity yo
if place_meeting(x,y+2,0) { vsp = 0 } else { vsp += global.Grav }
    
//Walking
if !(right and left) {
    if right { if hsp &lt; Speed { hsp += Speed * .2 } }
    if left { if hsp &gt; -Speed { hsp -= Speed * .2 } }
}
//drag
if !left and !right {
    if place_meeting(x,y+2,par_solid) {
        hsp = hsp * .6
    } else {
        hsp = hsp *.95
    }
}

//}

if !collision_line(x-1,y+4,x-1,y+8,par_solid,true,true) and !down {
    //wall sliding
    
    slide1 = instance_place(x+2,y,par_solid)
    slide2 = instance_place(x-2,y,par_solid)
     
    if instance_exists(slide1) {//and sign(vsp) != 1 {
        if up and vsp != 0 {//and slide1.object_index != oWall2 {
            vsp = -JumpSpeed
            jumps -= 1
            hsp = -Speed * 2
            //audio_play_sound(sPlayer_jump1, 1, false); //jump sound [ben]
            lastside = 0
            vsp = vsp * .91
        }
    //lastside = 0
    //vsp = vsp * .91
    }
    if instance_exists(slide2) {//and sign(vsp) != 1 {
        if up and vsp != 0 { //and slide2.object_index != oWall2 {
            vsp = -JumpSpeed
            jumps -= 1
            hsp = Speed * 1.5
            //audio_play_sound(sPlayer_jump1, 1, false); //jump sound [ben]
            lastside = 0
            vsp = vsp * .91
        }
    //lastside = 1
    //vsp = vsp * .91
    }
}

//jumping
if up and place_meeting(x,y + 2,par_solid) {
    vsp = -JumpSpeed
    ///Jump sound goes here [ben]
}

//terminal velocity(s)  (These prevent things from getting too crazy)
if abs(hsp) &gt; 4 { hsp = sign(hsp) * 4 }
if abs(vsp) &gt; 6 { vsp = sign(vsp) * 6 }

//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!
//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!    

    // Collisions
//Horizontal collisions
if (place_meeting(x+hsp, y, par_solid)) {
    while (!place_meeting(x+sign(hsp),y,par_solid)){
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp //* global.time;
//vertical collisions
if (place_meeting(x, y+vsp, par_solid)) {
    while (!place_meeting(x,y+sign(vsp),par_solid)){
        y += sign(vsp);
        playLandSound = true;
    }
    vsp = 0;
    if(playLandSound)
    {
        //audio_play_sound(sPlayer_land1, 1, false); //ground landing sound [ben]
        playLandSound = false;
    }
}
y += vsp //* global.time;

//animation stuff

//point me the right direction!
if sign(hsp) != 0 and (right or left) { image_xscale = sign(hsp) }

//am i running or am i idle
if hsp &gt; .2 or hsp &lt; -.2
{
    if vsp == 0 //and sprite_index != spr_player_death {
    {
        sprite_index = spr_player_run
    }
} else {
    if vsp == 0 //and sprite_index != spr_player_death
    {
        sprite_index = spr_player_idle
    }
}

//am i going up and down (if i'm airborne) //currently dissabled because of lack of sprites
/*
    if vsp &lt; 0
    {
        sprite_index = spr_player_up
    }
    if vsp &gt; 0 
    {
        sprite_index = spr_player_down
    }
*/

//health stuff
//var spike;
//spike = instance_place(x,y,oSpikes)
//if instance_exists(spike) { if spike.state != false { HP -= 1 } }

if HP &lt;= 0 {
    //death sound [ben]
    /*
    //blood, disabled
    repeat(200) {
        
        with (instance_create(x,y,oBlood)) {
            s = true
            dir = random(360)
            spd = random(5)
            hsp = lengthdir_x(spd,dir)
            vsp = lengthdir_y(spd,dir)
            image_blend = make_colour_rgb(random_range(151,255),80,79) //181
            image_alpha = random_range(.6,1.5)
            if image_alpha &gt; 1 { image_alpha = 1 }
        }
        
    }
    */
    instance_destroy()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
