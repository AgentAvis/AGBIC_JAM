<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tweakables
Speed = 2 * 2 JumpSpeed = 2.75 * 2
global.Grav = .13 * 3
HP = 2
jumps = 20
image_speed = 0.15
ht = Speed * 2 //horisontal terminal velocity
vt = 16
scale = .5
can_jump = false;

//init
vsp = 0                //custon vspeed
hsp = 0                //custom hspeed
App = false            //used for slo-mo basically
app = 0                //timerr used to count if its time for me to do things
lastside = 0           //last side i slid on, should be disabled
num = 0                //used for animating the SECOND drawn sprite
image_xscale = scale
image_yscale = scale


//audio
playLandSound = false; //forget what this is for
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//boarding the ship
if place_meeting(x,y+2,obj_boat) and keyboard_check_pressed(ord('F')) { instance_destroy() }

if keyboard_check_pressed(ord('T')) and global.debug { x = mouse_x y = mouse_y }

//inputs
up = keyboard_check_pressed(ord('W')) + keyboard_check_pressed(vk_space)
left = keyboard_check(ord('A'))
right = keyboard_check(ord('D'))
down = keyboard_check(ord('S'))

if !instance_place(x,y,obj_latter)
{
    //Gravity yo
    if place_meeting(x,y+2,par_solid_platforming) { vsp = 0 } else { vsp += global.Grav }
    if place_meeting(x,y+2,obj_boat) { can_jump = false; } else { can_jump = true; }
}

if up &amp;&amp; instance_place(x,y,obj_latter)
{
y -= 10;
}
    
//Walking
if !(right and left) {
    if right { if hsp &lt; Speed { hsp += Speed * .2 } }
    if left { if hsp &gt; -Speed { hsp -= Speed * .2 } }
}
//drag
if !left and !right {
    if place_meeting(x,y+2,par_solid_platforming) {
        hsp = hsp * .6
    } else {
        hsp = hsp *.95
    }
}

if !collision_line(x-1,y+4,x-1,y+8,par_solid_platforming,true,true) and !down {
    //wall sliding
    
    slide1 = instance_place(x+2,y,par_solid_platforming)
    slide2 = instance_place(x-2,y,par_solid_platforming)
     
    if instance_exists(slide1) {//and sign(vsp) != 1 {
        if up and vsp != 0 {//and slide1.object_index != oWall2 {
            vsp = -JumpSpeed
            jumps -= 1
            hsp = -Speed * 2
            //audio_play_sound(sPlayer_jump1, 1, false); //jump sound [ben]
            lastside = 0
            vsp = vsp * .91
        }
    //lastside = 0
    //vsp = vsp * .91
    }
    if instance_exists(slide2) {//and sign(vsp) != 1 {
        if up and vsp != 0 { //and slide2.object_index != oWall2 {
            vsp = -JumpSpeed
            jumps -= 1
            hsp = Speed * 1.5
            //audio_play_sound(sPlayer_jump1, 1, false); //jump sound [ben]
            lastside = 0
            vsp = vsp * .91
        }
    //lastside = 1
    //vsp = vsp * .91
    }
}

//jumping
if up and place_meeting(x,y + 2,par_solid_platforming) &amp;&amp; can_jump {
    vsp = -JumpSpeed
    ///Jump sound goes here [ben]
}

//terminal velocity(s)  (These prevent things from getting too crazy)
if abs(hsp) &gt; ht { hsp = sign(hsp) * ht }
if abs(vsp) &gt; vt { vsp = sign(vsp) * vt }

//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!
//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!    

    // Collisions
//Horizontal collisions
if (vsp == 0) // "Stick" player to ground on shallow downward slopes
{
    yplus = 0;
    while (!place_meeting(x,y+yplus+1,par_solid_platforming) &amp;&amp; yplus &lt;= abs(.5*hsp)) yplus +=1;
    if place_meeting(x,y+yplus+1,par_solid_platforming)
    {
        y += yplus;
    }
}
if (place_meeting(x+hsp, y, par_solid_platforming)) {
    
    yplus = 0;
    while (place_meeting(x+hsp,y-yplus,par_solid_platforming) and yplus &lt;= abs(1 * hsp)) { yplus ++ }
    if place_meeting(x+hsp,y-yplus,par_solid_platforming) {  
        
        while (!place_meeting(x+sign(hsp),y,par_solid_platforming)){ x += sign(hsp);}
        hsp = 0;
    } else {
    y-= yplus;
    }
}
x += hsp //* global.time;

if (place_meeting(x, y+vsp, par_solid_platforming)) {
    while (!place_meeting(x,y+sign(vsp),par_solid_platforming)){
        y += sign(vsp);
        playLandSound = true;
    }
    vsp = 0;
    if(playLandSound)
    {
        //audio_play_sound(sPlayer_land1, 1, false); //ground landing sound [ben]
        playLandSound = false;
    }
}
y += vsp //* global.time;

//animation stuff

//point me the right direction!
if sign(hsp) != 0 and (right or left) { image_xscale = scale * sign(hsp) }

//am i running or am i idle
if hsp &gt; .2 or hsp &lt; -.2
{
    if vsp == 0 //and sprite_index != spr_player_death {
    {
        sprite_index = spr_player_run
    }
} else {
    if vsp == 0 //and sprite_index != spr_player_death
    {
        sprite_index = spr_player_idle
    }
}

//am i going up and down (if i'm airborne) //currently dissabled because of lack of sprites
/*
    if vsp &lt; 0
    {
        sprite_index = spr_player_up
    }
    if vsp &gt; 0 
    {
        sprite_index = spr_player_down
    }
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
